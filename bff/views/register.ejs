<div class="container-box-register">
  <div class="center-box-register">
    <h3 class="register-header">REGISTER</h3>
    <% if (message) { %>
      <div style="background-color: #f44336; color: white; padding: 12px; margin-bottom: 16px; border-radius: 6px;">
        <strong>‚ö†Ô∏è Error:</strong> <%= message %>
      </div>
    <% } %>
    <form method="POST" action="/register" id="form-register" class="form-register">
      <label for="name">Name:</label>
      <input type="text" name="name" id="name" required>
      <br><br>
      <label for="email">Email:</label>
      <input type="email" name="email" id="email" required>
      <br><br>
      <label for="password">Password:</label>
      <input type="password" name="password" id="password" required>
      <br><br>
      <label for="confirmPassword">Confirm Password:</label>
      <input type="password" name="confirmPassword" id="confirmPassword" required>
      <br><br>
      <button type="submit" class="btn-primary">Register</button>
    </form>
    <p>Already have an account? <a href="/login" class="Register_here tag-index">Login here</a>.</p>
  </div>
</div>
<script>

  document.getElementById('form-register').addEventListener('submit', async (e) => {
    e.preventDefault(); // prevent default form submit

    const form = e.target;
    const formData = new FormData(form);

    const data = Object.fromEntries(formData.entries());
    try {
      const res = await fetch(`/register`, {
          method: 'POST',
          // üëá ADD THIS HEADERS OBJECT
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
      });

      if (!res.ok) {
          const error = await res.json();
          alert(`Error: ${error.error}`);
          return;
      }

      // Expect backend to return { eventId }
      const { eventId } = await res.json();

      let retries = 3;
      while (retries-- > 0) {
          const statusRes = await fetch(`/status/user-service/${eventId}`);
          
          if (!statusRes) {
            alert('ƒêƒÉng k√Ω th·∫•t b·∫°i');
            return;
          }

          const statusData = await statusRes.json();

          if (statusData.status === 'completed') {
              window.location.href = '/login?registered=success'
              return;
          }

          if (statusData.status === 'failed') {
              alert('ƒêƒÉng k√Ω th·∫•t b·∫°i!');
              return;
          }

          await new Promise(r => setTimeout(r, 2000)); // wait before retry
      }


      alert('Qu√° th·ªùi gian ƒëƒÉng k√Ω! Xin th·ª≠ l·∫°i!')
      
    } catch (err) {
        console.error(err);
        alert('ƒê√£ c√≥ l·ªói x·∫£y ra! Xin th·ª≠ l·∫°i sau~');
    }
  })
</script>